{"name":"Asynchronous \"setState\" in Reactjs","tagline":"What!!! Why?? How...","body":"## setState() in Reactjs\r\nReactjs has Components that uses States for user interaction. For example when a user clicks a button, through state we tell React what to do , display / hide / focus / change or whatever...\r\n\r\n\r\nBut how do we change this state???\r\n\r\n\r\nWell, good for us React provides simple method **\"setState()\"** that changes the state as told. \r\n\r\n### **What is meant by Asynchronous setState() ???**\r\n\r\n     constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            counter : 0\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        console.log(\"Before click execution: \"+this.state.counter);\r\n        this.setState({\r\n            counter : state.counter + 1\r\n        })\r\n        console.log(\"After click execution: \"+this.state.counter);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button onClick = {this.handleClick}>\r\n                    Click Me\r\n                </Button>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n\r\n\r\nLog statement will print same counter before and after click execution. \r\n\r\n\r\nThis is **\"Asynchronous\"** nature of setState.\r\n\r\n\r\nNormal working would be, handleClick should execute step by step and setState() should change the state of counter before log statement executes, this will be Synchronous nature but React doesn't work that way, it queues all the state changes and executes them in batches.\r\n\r\n### **But Why ????**\r\n\r\nReact executes state changes in batches, because usually every user interaction will create some change in state, everytime state changes react renders parent, child components related to that component, this leads to a lot of renders by which users can get exhausted and leave the site(We don't want that).\r\n\r\n\r\nSo React executes them priority wise so if user makes some changes which will be reflected on UI, then react sets those states and renders the page.\r\n\r\n### **Then How to resolve this inconsistency ???**\r\n\r\nFor this react provides \"callbacks\" in setState. \r\n\r\n      this.setState({\r\n            counter : this.state.counter + 1\r\n        },()=>\r\n        console.log(\"After click execution: \"+this.state.counter))\r\n\r\n\r\nWith this after click log prints only after setState execution so there won't be any inconsistency in states.\r\n\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}